// ====================================
// NAVBAR AND NAVIGATION FUNCTIONALITY
// ====================================

// Navbar scroll effect
window.addEventListener('scroll', function() {
    const navbar = document.getElementById('navbar');
    if (window.scrollY > 50) {
        navbar.classList.add('scrolled');
    } else {
        navbar.classList.remove('scrolled');
    }
});

// Active page highlighting
document.addEventListener('DOMContentLoaded', function() {
    const currentLocation = location.hash || '#hero-section';
    const menuItems = document.querySelectorAll('#navbar li a');
    
    menuItems.forEach(item => {
        if (item.getAttribute('href') === currentLocation) {
            item.classList.add('active');
        }
    });
});

// Smooth scrolling for anchor links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
            
            // Update active nav item
            document.querySelectorAll('#navbar li a').forEach(item => {
                item.classList.remove('active');
            });
            this.classList.add('active');
        }
    });
});

// Mobile menu toggle
document.addEventListener('DOMContentLoaded', function() {
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('.nav-menu');

    if (hamburger && navMenu) {
        hamburger.addEventListener('click', function() {
            hamburger.classList.toggle('active');
            navMenu.classList.toggle('active');
        });

        // Close menu when clicking on a link
        document.querySelectorAll('.nav-menu a').forEach(link => {
            link.addEventListener('click', function() {
                hamburger.classList.remove('active');
                navMenu.classList.remove('active');
            });
        });

        // Close menu when clicking outside
        document.addEventListener('click', function(e) {
            if (!hamburger.contains(e.target) && !navMenu.contains(e.target)) {
                hamburger.classList.remove('active');
                navMenu.classList.remove('active');
            }
        });
    }
});

// ====================================
// TYPEWRITER EFFECT
// ====================================

class TypeWriter {
    constructor(element, words, wait = 3000) {
        this.element = element;
        this.words = words;
        this.wait = parseInt(wait, 10);
        this.wordIndex = 0;
        this.txt = '';
        this.isDeleting = false;
        this.type();
    }

    type() {
        const current = this.wordIndex % this.words.length;
        const fullTxt = this.words[current];

        if(this.isDeleting) {
            this.txt = fullTxt.substring(0, this.txt.length - 1);
        } else {
            this.txt = fullTxt.substring(0, this.txt.length + 1);
        }

        this.element.innerHTML = this.txt + '<span class="cursor"></span>';

        let typeSpeed = 100;

        if(this.isDeleting) {
            typeSpeed /= 2;
        }

        if(!this.isDeleting && this.txt === fullTxt) {
            typeSpeed = this.wait;
            this.isDeleting = true;
        } else if(this.isDeleting && this.txt === '') {
            this.isDeleting = false;
            this.wordIndex++;
            typeSpeed = 500;
        }

        setTimeout(() => this.type(), typeSpeed);
    }
}

// Initialize TypeWriter when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    const welcomeText = document.querySelector('.welcome h1');
    if(welcomeText) {
        const words = ['Welcome', 'Hoş Geldin', 'Bienvenue', 'Willkommen', 'ようこそ'];
        new TypeWriter(welcomeText, words, 2000);
    }
});

// ====================================
// CONTACT FORM FUNCTIONALITY
// ====================================

document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.form form');
    const inputs = document.querySelectorAll('#email, #name, #company, #write-box');
    const selectElement = document.querySelector('#service');
    const submitButton = document.getElementById('submit');

    if (!form || !inputs.length || !submitButton) return;

    // Email validation function
    function validateEmail(email) {
        const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return re.test(email);
    }

    // Form validation function
    function validateForm() {
        let isValid = true;

        // Validate regular inputs
        inputs.forEach(input => {
            const formGroup = input.closest('.form-group');
            const errorMessage = formGroup.querySelector('.error-message');
            
            // Skip company field as it's optional
            if (input.id === 'company') return;
            
            // Remove previous states
            formGroup.classList.remove('error', 'success');
            errorMessage.classList.remove('show');

            if (!input.value.trim()) {
                formGroup.classList.add('error');
                errorMessage.textContent = `Please enter your ${input.placeholder.toLowerCase()}`;
                errorMessage.classList.add('show');
                isValid = false;
            } else if (input.type === 'email' && !validateEmail(input.value)) {
                formGroup.classList.add('error');
                errorMessage.textContent = 'Please enter a valid email address';
                errorMessage.classList.add('show');
                isValid = false;
            } else {
                formGroup.classList.add('success');
            }
        });

        // Validate select element
        if (selectElement) {
            const formGroup = selectElement.closest('.form-group');
            const errorMessage = formGroup.querySelector('.error-message');
            
            formGroup.classList.remove('error', 'success');
            errorMessage.classList.remove('show');

            if (!selectElement.value) {
                formGroup.classList.add('error');
                errorMessage.textContent = 'Please select a service type';
                errorMessage.classList.add('show');
                isValid = false;
            } else {
                formGroup.classList.add('success');
            }
        }

        return isValid;
    }

    // Real-time validation for inputs
    inputs.forEach(input => {
        input.addEventListener('blur', function() {
            if (this.id === 'company') return; // Skip optional field
            
            const formGroup = this.closest('.form-group');
            const errorMessage = formGroup.querySelector('.error-message');
            
            formGroup.classList.remove('error', 'success');
            errorMessage.classList.remove('show');

            if (!this.value.trim()) {
                formGroup.classList.add('error');
                errorMessage.textContent = `Please enter your ${this.placeholder.toLowerCase()}`;
                errorMessage.classList.add('show');
            } else if (this.type === 'email' && !validateEmail(this.value)) {
                formGroup.classList.add('error');
                errorMessage.textContent = 'Please enter a valid email address';
                errorMessage.classList.add('show');
            } else {
                formGroup.classList.add('success');
            }
        });

        input.addEventListener('focus', function() {
            const formGroup = this.closest('.form-group');
            formGroup.classList.remove('error');
            formGroup.querySelector('.error-message').classList.remove('show');
        });
    });

    // Real-time validation for select
    if (selectElement) {
        selectElement.addEventListener('change', function() {
            const formGroup = this.closest('.form-group');
            const errorMessage = formGroup.querySelector('.error-message');
            
            formGroup.classList.remove('error', 'success');
            errorMessage.classList.remove('show');

            if (!this.value) {
                formGroup.classList.add('error');
                errorMessage.textContent = 'Please select a service type';
                errorMessage.classList.add('show');
            } else {
                formGroup.classList.add('success');
            }
        });
    }

    // Form submission
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (validateForm()) {
            // Add loading state
            submitButton.innerHTML = '<span>Sending...</span><i class="fas fa-spinner fa-spin"></i>';
            submitButton.disabled = true;
            form.classList.add('loading');

            // Simulate form submission (replace with actual form handling)
            setTimeout(() => {
                // Show success message
                const successMessage = document.querySelector('.success-message');
                if (successMessage) {
                    successMessage.classList.add('show');
                }
                
                // Reset form
                form.reset();
                inputs.forEach(input => {
                    input.closest('.form-group').classList.remove('success');
                });
                if (selectElement) {
                    selectElement.closest('.form-group').classList.remove('success');
                }
                
                // Reset button
                submitButton.innerHTML = '<span>Send Message</span><i class="fas fa-paper-plane"></i>';
                submitButton.disabled = false;
                form.classList.remove('loading');
                
                // Hide success message after 5 seconds
                setTimeout(() => {
                    if (successMessage) {
                        successMessage.classList.remove('show');
                    }
                }, 5000);
                
            }, 2000);
        }
    });
});

// ====================================
// SOCIAL ICONS ANIMATION
// ====================================

document.addEventListener('DOMContentLoaded', function() {
    const observerOptions = {
        threshold: 0.3,
        rootMargin: '0px 0px -50px 0px'
    };

    const socialObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const socialIcons = entry.target.querySelectorAll('#logos li');
                socialIcons.forEach((icon, index) => {
                    setTimeout(() => {
                        icon.style.opacity = '1';
                        icon.style.transform = 'translateY(0) scale(1)';
                    }, index * 100);
                });
            }
        });
    }, observerOptions);

    const socialSection = document.querySelector('.social-section');
    if (socialSection) {
        // Initially hide social icons
        const socialIcons = socialSection.querySelectorAll('#logos li');
        socialIcons.forEach(icon => {
            icon.style.opacity = '0';
            icon.style.transform = 'translateY(30px) scale(0.8)';
            icon.style.transition = 'all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1)';
        });

        socialObserver.observe(socialSection);
    }
});

// ====================================
// CODE COPY FUNCTIONALITY
// ====================================

function copyCode(button) {
    const codeBlock = button.closest('.code-block');
    const code = codeBlock.querySelector('code').textContent;
    
    navigator.clipboard.writeText(code).then(() => {
        const originalText = button.textContent;
        button.textContent = 'Copied!';
        button.classList.add('copied');
        
        setTimeout(() => {
            button.textContent = originalText;
            button.classList.remove('copied');
        }, 2000);
    }).catch(() => {
        const originalText = button.textContent;
        button.textContent = 'Failed to copy';
        button.classList.add('error');
        
        setTimeout(() => {
            button.textContent = originalText;
            button.classList.remove('error');
        }, 2000);
    });
}

// ====================================
// SCROLL ANIMATIONS
// ====================================

// Intersection Observer for content sections
document.addEventListener('DOMContentLoaded', function() {
    const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
    };

    const contentObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.style.opacity = '1';
                entry.target.style.transform = 'translateY(0)';
            }
        });
    }, observerOptions);

    // Observe all content sections
    const contentSections = document.querySelectorAll('.content-section');
    contentSections.forEach(section => {
        section.style.opacity = '0';
        section.style.transform = 'translateY(30px)';
        section.style.transition = 'all 0.6s ease-out';
        contentObserver.observe(section);
    });
});

// ====================================
// TERMINAL ANIMATION
// ====================================

document.addEventListener('DOMContentLoaded', function() {
    const terminalLines = document.querySelectorAll('.terminal-line');
    terminalLines.forEach((line, index) => {
        if (!line.classList.contains('terminal-cursor')) {
            line.style.opacity = '0';
            setTimeout(() => {
                line.style.opacity = '1';
                line.style.animation = 'slideInUp 0.5s ease-out';
            }, index * 300);
        }
    });
});

// ====================================
// SCROLL TO TOP FUNCTIONALITY
// ====================================

document.addEventListener('DOMContentLoaded', function() {
    const scrollToTopBtn = document.getElementById('scrollToTop');
    
    if (scrollToTopBtn) {
        // Show/hide scroll to top button
        window.addEventListener('scroll', function() {
            if (window.pageYOffset > 300) {
                scrollToTopBtn.classList.add('visible');
            } else {
                scrollToTopBtn.classList.remove('visible');
            }
        });
        
        // Scroll to top when button is clicked
        scrollToTopBtn.addEventListener('click', function() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });
    }
});

// ====================================
// READING PROGRESS BAR
// ====================================

document.addEventListener('DOMContentLoaded', function() {
    const progressBar = document.querySelector('.progress-bar');
    
    if (progressBar) {
        window.addEventListener('scroll', function() {
            const article = document.querySelector('.blog-article');
            if (article) {
                const articleTop = article.offsetTop;
                const articleHeight = article.offsetHeight;
                const windowHeight = window.innerHeight;
                const scrolled = window.pageYOffset;
                
                const progress = Math.max(0, Math.min(100, 
                    ((scrolled - articleTop + windowHeight) / articleHeight) * 100
                ));
                
                progressBar.style.width = progress + '%';
            }
        });
    }
});

// ====================================
// LOADING ANIMATION
// ====================================

window.addEventListener('load', function() {
    document.body.classList.add('loaded');
});

// ====================================
// SHARE FUNCTIONALITY
// ====================================

document.addEventListener('DOMContentLoaded', function() {
    const shareButtons = document.querySelectorAll('.share-btn');
    
    shareButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            
            const url = window.location.href;
            const title = document.title;
            
            if (this.classList.contains('twitter')) {
                window.open(`https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`, '_blank');
            } else if (this.classList.contains('linkedin')) {
                window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`, '_blank');
            } else if (this.classList.contains('reddit')) {
                window.open(`https://www.reddit.com/submit?url=${encodeURIComponent(url)}&title=${encodeURIComponent(title)}`, '_blank');
            } else if (this.classList.contains('email')) {
                window.location.href = `mailto:?subject=${encodeURIComponent(title)}&body=${encodeURIComponent(url)}`;
            }
        });
    });
});

// ====================================
// KEYBOARD NAVIGATION
// ====================================

document.addEventListener('keydown', function(e) {
    // Escape key to close mobile menu
    if (e.key === 'Escape') {
        const hamburger = document.querySelector('.hamburger');
        const navMenu = document.querySelector('.nav-menu');
        
        if (hamburger && navMenu) {
            hamburger.classList.remove('active');
            navMenu.classList.remove('active');
        }
    }
});

// ====================================
// PERFORMANCE OPTIMIZATION
// ====================================

// Debounce function for scroll events
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Apply debouncing to scroll events
const debouncedScrollHandler = debounce(function() {
    // Any additional scroll handling can go here
}, 10);

window.addEventListener('scroll', debouncedScrollHandler);

// ====================================
// ERROR HANDLING
// ====================================

window.addEventListener('error', function(e) {
    console.error('JavaScript error:', e.error);
});

// ====================================
// INITIALIZATION
// ====================================

document.addEventListener('DOMContentLoaded', function() {
    console.log('CyberSec Blog loaded successfully!');
    
    // Initialize any additional features here
    initializeTooltips();
    initializeAnalytics();
});

// Tooltip initialization
function initializeTooltips() {
    const tooltipElements = document.querySelectorAll('[title]');
    tooltipElements.forEach(element => {
        element.addEventListener('mouseenter', function() {
            // Custom tooltip logic can be added here
        });
    });
}

// Analytics initialization (placeholder)
function initializeAnalytics() {
    // Add your analytics tracking code here
    // Example: Google Analytics, custom analytics, etc.
}